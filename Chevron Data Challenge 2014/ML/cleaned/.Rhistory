#Replacing NA with average EUR from training set (NA not allowed for submission)
# predicted[is.na(predicted)] <- mean(train$EUR_o..Mstb.)
rmse <- mean((actual - predicted)^2)
if (rmse < best.rmse) {
best.rmse <- rmse
best.train <- train
best.test <- test
best.fit <- fit
#     final = cbind(actual,predicted)
#     write.table(final, "output.csv",sep=",",row.names=FALSE, quote = FALSE)
}
}
summary(best.fit)
# write.table(train, "best_train.csv",sep=",",row.names=FALSE, quote = FALSE)
# write.table(test, "best_test.csv",sep=",",row.names=FALSE, quote = FALSE)
# TODO after finding best model, train it on whole training data!
# sub = sample(nrow(baseTrain),floor(nrow(baseTrain)*0.70))
# train=baseTrain[sub,]
# test=baseTrain[-sub,]
# train = read.csv("best_train_log.csv", header = TRUE)
# test = read.csv("best_test.csv", header = TRUE)
# str(train)
# train = train[,c(-2,-8,-15,-17)]
# test = test[,c(-2,-8,-15,-17)]
# str(train)
# the model - LM
# fit <- lm(EUR_o..Mstb. ~. , data = train, na.action = na.exclude)
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric.csv", header = TRUE)
# exclude some unwanted columns
# baseTrain = data[,c(-1,-5,-(13:14),-(17:20))]
baseTrain = data[,c(-(1:2),-5)]
str(baseTrain)
# The test set for calculating actual predictions
#baseTest = read.csv("base_test.csv", header = TRUE)
require(RWeka)
require(caret)
iterations <- 100
best.rmse <- 10000
best.train <- baseTrain
best.test <- baseTrain
best.fit <- M5P(EUR_o..Mstb. ~. , data = baseTrain, na.action = na.pass)
best.cor <- -1
# repeat iterations to get best model
for(i in 1:iterations) {
# set seed
seed.val <- sample(1:10000, 1)
set.seed(seed.val)
# do stratified random sampling to generate training & test sets
trainIndex <- createDataPartition(baseTrain$Operator.Numeric, p = .7,list = FALSE,times = 1)
train=baseTrain[trainIndex,]
test=baseTrain[-trainIndex,]
# the model - M5P from RWeka package
fit <- M5P(EUR_o..Mstb. ~. , data = train, na.action = na.pass)
predicted <- predict(fit, newdata = test)
#Convert predicted response vector as dataframe
actual= test$EUR_o..Mstb.
predicted <- as.data.frame(predicted)
colnames(predicted) <- "predicted.EUR"
#Replacing NA with average EUR from training set (NA not allowed for submission)
# predicted[is.na(predicted)] <- mean(train$EUR_o..Mstb.)
cor <- cor(actual, predicted)
rmse <- mean((actual - predicted)^2)
#   if (rmse < best.rmse) {
if (cor > best.cor) {
print(paste("====>", cor, sep = " "))
best.rmse <- rmse
best.train <- train
best.test <- test
best.fit <- fit
best.cor <- cor
#     final = cbind(actual,predicted)
#     write.table(final, "output.csv",sep=",",row.names=FALSE, quote = FALSE)
}
}
summary(best.fit)
# write.table(train, "best_train.csv",sep=",",row.names=FALSE, quote = FALSE)
# write.table(test, "best_test.csv",sep=",",row.names=FALSE, quote = FALSE)
# TODO after finding best model, train it on whole training data!
# sub = sample(nrow(baseTrain),floor(nrow(baseTrain)*0.70))
# train=baseTrain[sub,]
# test=baseTrain[-sub,]
# train = read.csv("best_train_log.csv", header = TRUE)
# test = read.csv("best_test.csv", header = TRUE)
# str(train)
# train = train[,c(-2,-8,-15,-17)]
# test = test[,c(-2,-8,-15,-17)]
# str(train)
# the model - LM
# fit <- lm(EUR_o..Mstb. ~. , data = train, na.action = na.exclude)
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric.csv", header = TRUE)
# exclude some unwanted columns
# baseTrain = data[,c(-1,-5,-(13:14),-(17:20))]
baseTrain = data[,c(-(1:2),-5)]
str(baseTrain)
# The test set for calculating actual predictions
#baseTest = read.csv("base_test.csv", header = TRUE)
require(RWeka)
require(caret)
iterations <- 1000
best.rmse <- 10000
best.train <- baseTrain
best.test <- baseTrain
best.fit <- M5P(EUR_o..Mstb. ~. , data = baseTrain, na.action = na.pass)
best.cor <- -1
# repeat iterations to get best model
for(i in 1:iterations) {
# set seed
seed.val <- sample(1:10000, 1)
set.seed(seed.val)
# do stratified random sampling to generate training & test sets
trainIndex <- createDataPartition(baseTrain$Operator.Numeric, p = .7,list = FALSE,times = 1)
train=baseTrain[trainIndex,]
test=baseTrain[-trainIndex,]
# the model - M5P from RWeka package
fit <- M5P(EUR_o..Mstb. ~. , data = train, na.action = na.pass)
predicted <- predict(fit, newdata = test)
#Convert predicted response vector as dataframe
actual= test$EUR_o..Mstb.
predicted <- as.data.frame(predicted)
colnames(predicted) <- "predicted.EUR"
#Replacing NA with average EUR from training set (NA not allowed for submission)
# predicted[is.na(predicted)] <- mean(train$EUR_o..Mstb.)
cor <- cor(actual, predicted)
rmse <- mean((actual - predicted)^2)
#   if (rmse < best.rmse) {
if (cor > best.cor) {
print(paste("====>", cor, sep = " "))
best.rmse <- rmse
best.train <- train
best.test <- test
best.fit <- fit
best.cor <- cor
#     final = cbind(actual,predicted)
#     write.table(final, "output.csv",sep=",",row.names=FALSE, quote = FALSE)
}
}
summary(best.fit)
# write.table(train, "best_train.csv",sep=",",row.names=FALSE, quote = FALSE)
# write.table(test, "best_test.csv",sep=",",row.names=FALSE, quote = FALSE)
# TODO after finding best model, train it on whole training data!
# sub = sample(nrow(baseTrain),floor(nrow(baseTrain)*0.70))
# train=baseTrain[sub,]
# test=baseTrain[-sub,]
# train = read.csv("best_train_log.csv", header = TRUE)
# test = read.csv("best_test.csv", header = TRUE)
# str(train)
# train = train[,c(-2,-8,-15,-17)]
# test = test[,c(-2,-8,-15,-17)]
# str(train)
# the model - LM
# fit <- lm(EUR_o..Mstb. ~. , data = train, na.action = na.exclude)
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric.csv", header = TRUE)
# exclude some unwanted columns
# baseTrain = data[,c(-1,-5,-(13:14),-(17:20))]
baseTrain = data[,c(-(1:2),-5)]
str(baseTrain)
# The test set for calculating actual predictions
#baseTest = read.csv("base_test.csv", header = TRUE)
require(RWeka)
require(caret)
iterations <- 1000
best.rmse <- 10000
best.train <- baseTrain
best.test <- baseTrain
best.fit <- M5P(EUR_o..Mstb. ~. , data = baseTrain, na.action = na.pass)
best.cor <- -1
# repeat iterations to get best model
for(i in 1:iterations) {
# set seed
seed.val <- sample(1:10000, 1)
set.seed(seed.val)
# do stratified random sampling to generate training & test sets
trainIndex <- createDataPartition(baseTrain$Operator.Numeric, p = .7,list = FALSE,times = 1)
train=baseTrain[trainIndex,]
test=baseTrain[-trainIndex,]
# the model - M5P from RWeka package
fit <- M5P(EUR_o..Mstb. ~. , data = train, na.action = na.pass)
predicted <- predict(fit, newdata = test)
#Convert predicted response vector as dataframe
actual= test$EUR_o..Mstb.
predicted <- as.data.frame(predicted)
colnames(predicted) <- "predicted.EUR"
#Replacing NA with average EUR from training set (NA not allowed for submission)
# predicted[is.na(predicted)] <- mean(train$EUR_o..Mstb.)
cor <- cor(actual, predicted)
rmse <- mean((actual - predicted)^2)
#   if (rmse < best.rmse) {
if (cor > best.cor) {
print(paste("====>", cor, sep = " "))
best.rmse <- rmse
best.train <- train
best.test <- test
best.fit <- fit
best.cor <- cor
#     final = cbind(actual,predicted)
#     write.table(final, "output.csv",sep=",",row.names=FALSE, quote = FALSE)
}
}
summary(best.fit)
require(relaimpo)
?calc.relimp
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("best_train_clean1.csv", header = TRUE)
# linear = lm(EUR_o..Mstb. ~., data = data)
require(relaimpo)
rankings <- calc.relimp(EUR_o..Mstb. ~.,data=data)
rankings
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("best_train_clean1.csv", header = TRUE)
linear = lm(EUR_o..Mstb. ~., data = data)
require(car)
v = vif(linear)
vif = data.frame(v)
vif
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("best_train_clean.csv", header = TRUE)
linear = lm(EUR_o..Mstb. ~., data = data)
require(car)
v = vif(linear)
vif = data.frame(v)
vif
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("best_train_clean.csv", header = TRUE)
# linear = lm(EUR_o..Mstb. ~., data = data)
require(relaimpo)
rankings <- calc.relimp(EUR_o..Mstb. ~.,data=data)
rankings
rankings$lmg
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("best_train_clean.csv", header = TRUE)
# linear = lm(EUR_o..Mstb. ~., data = data)
require(relaimpo)
rankings <- calc.relimp(EUR_o..Mstb. ~.,data=data)
ranks=sort(rankings$lmg,decreasing=F)
ranks
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("best_train_clean.csv", header = TRUE)
# linear = lm(EUR_o..Mstb. ~., data = data)
require(relaimpo)
rankings <- calc.relimp(EUR_o..Mstb. ~.,data=data)
ranks=sort(rankings$lmg,decreasing=T)
ranks
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("best_train_clean1.csv", header = TRUE)
linear = lm(EUR_o..Mstb. ~., data = data)
require(car)
v = vif(linear)
vif = data.frame(v)
vif
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("best_train_clean1.csv", header = TRUE)
# linear = lm(EUR_o..Mstb. ~., data = data)
require(relaimpo)
rankings <- calc.relimp(EUR_o..Mstb. ~.,data=data)
ranks=sort(rankings$lmg,decreasing=T)
ranks
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("best_train_clean1.csv", header = TRUE)
data = data[,c(-10)]
linear = lm(EUR_o..Mstb. ~., data = data)
require(car)
v = vif(linear)
vif = data.frame(v)
vif
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("best_train_clean1.csv", header = TRUE)
data = data[,c(-10)]
# linear = lm(EUR_o..Mstb. ~., data = data)
require(relaimpo)
rankings <- calc.relimp(EUR_o..Mstb. ~.,data=data)
ranks=sort(rankings$lmg,decreasing=T)
ranks
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric1.csv", header = TRUE)
data = data[,c(-1,-5)]
linear = lm(EUR_o..Mstb. ~., data = data)
require(car)
v = vif(linear)
vif = data.frame(v)
vif
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric1.csv", header = TRUE)
data = data[,c(-1,-5)]
linear = lm(EUR_o..Mstb. ~., data = data)
require(car)
v = vif(linear)
vif = data.frame(v)
vif
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric1.csv", header = TRUE)
data = data[,c(-10)]
# linear = lm(EUR_o..Mstb. ~., data = data)
require(relaimpo)
rankings <- calc.relimp(EUR_o..Mstb. ~.,data=data)
ranks=sort(rankings$lmg,decreasing=T)
ranks
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric1.csv", header = TRUE)
data = data[,c(-1,-5)]
# linear = lm(EUR_o..Mstb. ~., data = data)
require(relaimpo)
rankings <- calc.relimp(EUR_o..Mstb. ~.,data=data)
ranks=sort(rankings$lmg,decreasing=T)
ranks
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric1.csv", header = TRUE)
data = data[,c(-1,-5)]
linear = lm(EUR_o..Mstb. ~., data = data)
require(car)
v = vif(linear)
vif = data.frame(v)
vif
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric1.csv", header = TRUE)
data = data[,c(-1,-5)]
# linear = lm(EUR_o..Mstb. ~., data = data)
require(relaimpo)
rankings <- calc.relimp(EUR_o..Mstb. ~.,data=data)
ranks=sort(rankings$lmg,decreasing=T)
ranks
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric1.csv", header = TRUE)
data = data[,c(-1,-4)]
linear = lm(EUR_o..Mstb. ~., data = data)
require(car)
v = vif(linear)
vif = data.frame(v)
vif
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric1.csv", header = TRUE)
data = data[,c(-1,-4)]
# linear = lm(EUR_o..Mstb. ~., data = data)
require(relaimpo)
rankings <- calc.relimp(EUR_o..Mstb. ~.,data=data)
ranks=sort(rankings$lmg,decreasing=T)
ranks
# write.table(train, "best_train.csv",sep=",",row.names=FALSE, quote = FALSE)
# write.table(test, "best_test.csv",sep=",",row.names=FALSE, quote = FALSE)
# TODO after finding best model, train it on whole training data!
# sub = sample(nrow(baseTrain),floor(nrow(baseTrain)*0.70))
# train=baseTrain[sub,]
# test=baseTrain[-sub,]
# train = read.csv("best_train_log.csv", header = TRUE)
# test = read.csv("best_test.csv", header = TRUE)
# str(train)
# train = train[,c(-2,-8,-15,-17)]
# test = test[,c(-2,-8,-15,-17)]
# str(train)
# the model - LM
# fit <- lm(EUR_o..Mstb. ~. , data = train, na.action = na.exclude)
# clear the memory!
rm(list=ls(all=TRUE))
gc()
# set the work directory
setwd("~/Chevron/DSChallenge/cleaned")
# load the training data
data = read.csv("base_training_numeric1.csv", header = TRUE)
# exclude some unwanted columns
# baseTrain = data[,c(-1,-5,-(13:14),-(17:20))]
baseTrain = data[,c(-1,-4)]
str(baseTrain)
# The test set for calculating actual predictions
#baseTest = read.csv("base_test.csv", header = TRUE)
require(RWeka)
require(caret)
iterations <- 1000
best.rmse <- 10000
best.train <- baseTrain
best.test <- baseTrain
best.fit <- M5P(EUR_o..Mstb. ~. , data = baseTrain, na.action = na.pass)
best.cor <- -1
# repeat iterations to get best model
for(i in 1:iterations) {
# set seed
seed.val <- sample(1:10000, 1)
set.seed(seed.val)
# do stratified random sampling to generate training & test sets
trainIndex <- createDataPartition(baseTrain$Operator.Numeric, p = .7,list = FALSE,times = 1)
train=baseTrain[trainIndex,]
test=baseTrain[-trainIndex,]
# the model - M5P from RWeka package
fit <- M5P(EUR_o..Mstb. ~. , data = train, na.action = na.pass)
predicted <- predict(fit, newdata = test)
#Convert predicted response vector as dataframe
actual= test$EUR_o..Mstb.
predicted <- as.data.frame(predicted)
colnames(predicted) <- "predicted.EUR"
#Replacing NA with average EUR from training set (NA not allowed for submission)
# predicted[is.na(predicted)] <- mean(train$EUR_o..Mstb.)
cor <- cor(actual, predicted)
rmse <- mean((actual - predicted)^2)
#   if (rmse < best.rmse) {
if (cor > best.cor) {
print(paste("====>", cor, sep = " "))
best.rmse <- rmse
best.train <- train
best.test <- test
best.fit <- fit
best.cor <- cor
#     final = cbind(actual,predicted)
#     write.table(final, "output.csv",sep=",",row.names=FALSE, quote = FALSE)
}
}
summary(best.fit)
